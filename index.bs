<pre class='metadata'>
Title: Web OTP API
Shortname: webotp
Level: 1
Status: CG-DRAFT
Group: WICG
ED: http://wicg.github.io/WebOTP
Repository: WICG/WebOTP
Editor: Sam Goto, Google Inc. https://google.com, goto@google.com
Favicon: logo-otp.png
Markup Shorthands: markdown yes, css no, biblio yes
Abstract: A Javascript API to request one time passwords for verifying credentials (e.g. phone numbers, emails).
Test Suite: https://github.com/web-platform-tests/wpt/tree/master/sms
</pre>

<pre class=anchors>
spec: ecma262; urlPrefix: https://tc39.github.io/ecma262/
    type: dfn
        text: time values; url: sec-time-values-and-time-range
        text: promise; url: sec-promise-objects
</pre>

<pre class=link-defaults>
spec:infra; type:dfn; text:list
spec:html; type:dfn; for:environment settings object; text:global object
spec:webidl; type:dfn; text:resolve
</pre>

<style>
dl.domintro dt {
    font-family: Menlo, Consolas, "DejaVu Sans Mono", Monaco, monospace;

    padding-top: 0.5em;
    padding-bottom: 1em;
}
dl.domintro dt a {
    color: inherit; border-bottom-style: none;
}
dl.domintro dt code {
    font-size: inherit;
}
</style>

<img src="logo-otp.svg" alt="logo"
    style="height: 100px; width: 100px; position: absolute; right: 20px; top: 30px;">

<!-- ============================================================ -->
# Introduction # {#intro}
<!-- ============================================================ -->

*This section is non-normative.*

Many web sites need to verify credentials (e.g. phone numbers and
email addresses) as part of their authentication flows. They currently
rely on sending one-time-passwords to these communication channels to
be used as proof of ownership. The one-time-password is manually
handed back by the user (typically by copying/pasting) to the web app
which is onerous and erroneous.

This a proposal for a client side javascript API that enables web
sites to request OTPs and a set of transport-specific conventions (we
start with SMS while leaving the door open to others) that can be used
in coordination with browsers.

<!-- ============================================================ -->
## The client side API ## {#intro-client}
<!-- ============================================================ -->

In this proposal, websites have the ability to call a browser API to
request OTPs coming from specific transports (e.g. via SMS).

The browser intermediates the receipt of the SMS and the handing off
to the calling website (typically asking for the user's consent), so
the API returns a promise asynchronously.

<div class=example>
```js
let {code, type} = await navigator.credentials.get({
  otp: {
    transport: ["sms"]
  }
});
```
</div>

<!-- ============================================================ -->
## The server side API ## {#intro-server}
<!-- ============================================================ -->

Once the client side API is called, the website's server can send
OTPs to the client via the requested transport mechanisms. For each
of these transport mechanism, a server side convention is set in
place to guarantee that the OTP is delivered safely and
programatically.

For SMS, for example, an SMS formatting convention is established to
allow agents to get programatic access to the otherwise human-readable
SMS. This specific convention gives agents access to (a) the OTP and
(b) the intended origin destination of the message:

<div class=example>
```
Your verification code is: 123ABC78

@example.com #123ABC78
```
</div>

<!-- ============================================================ -->
## Feature Detection ## {#intro-feature-detection}
<!-- ============================================================ -->

Not all user agents necessarily need to implement the WebOTP API at
the exact same moment in time, so websites need a mechanism to detect
if the API is available.

Websites can check for the presence of the OTPCredential global
interface:

<div class=example>
```js
if (!window.OTPCredential) {
  // feature not available
  return;
}
```
</div>

<!-- ============================================================ -->
## Web Components ## {#intro-wc}
<!-- ============================================================ -->

For the most part, OTP verification largely relies on:

- input, forms and copy/paste, on the client side and
- third party frameworks to send SMS, on the server side.

We expect some of these frameworks to develop declarative versions of
this API to facilitate the deployment of their customer's existing
code.

<div class=example>
Web Component Polyfills

```html
<script src="sms-sdk.js"></script>

<form>
  <input is="one-time-code" required />
  <input type="submit" />
</form>
```
</div>

And here is an example of how a framework could implement it
using web components:

<div class=example>
Web Component Polyfills

```js
customElements.define("one-time-code",
  class extends HTMLInputElement {
    connectedCallback() {
      this.receive();
    }
    async receive() {
      let {code, type} = await navigator.credentials.get({
        otp: {
         transport: ["sms"]
        }
      });
      this.value = otp;
      this.form.submit();
    }
  }, {
    extends: "input"
});
```
</div>

<!-- ============================================================ -->
## Abort API ## {#intro-abort}
<!-- ============================================================ -->

Many modern websites handle navigations on the client side. So, if a
user navigates away from an OTP flow to another flow, the request
needs to be cancelled so that the user isn't bothered with a
permission prompt that isn't relevant anymore.

To facilitate that, an abort controller can be passed to abort the
request:

<div class=example>
```js
let signal = new AbortController();

setTimeout(() => {
  // abort after two minutes
  signal.abort();
}, 2 * 60 * 1000);
  
let {code, type} = await navigator.credentials.get({
  abort: signal,
  otp: {
    transport: ["sms"]
  }
});
```
</div>

<!-- ============================================================ -->
# Transports # {#transports}
<!-- ============================================================ -->

We expect a variety of different transport mechanisms to enable OTPs
to be received, most notably via SMS, email and hardware devices.

Each of these transport mechanisms will need their own conventions on
how to provide OTPs to the browser.

In this draft, we start explicitly specifying how SMS OTPs can be
delivered to browsers, but we leave the API surface to be extensible
to other transports.

<!-- ============================================================ -->
## SMS ## {#transports-sms}
<!-- ============================================================ -->

One of the most commonly used transport mechanisms for OTP is via
SMS messages, allowing developers to verify phone numbers. They
are typically sent embedded in an SMS message, which gets copied and
pasted by users.

What follows is a definition of a machine-readable formatting convention
that servers can use to send SMS messages that browsers can intercept
and route securely to the right origin.

Here is an example of such convention:

<div class=example>
```
Your verification code is: 123ABC78

@example.com #123ABC78
```
</div>

<!-- ============================================================ -->
# The {{OTPCredential}} Interface # {#OTPCredential}
<!-- ============================================================ -->

The OTPCredential interface represents a one time password that is
returned as a result of the credential management request. The code
attribute contains the programatically readable OTP that was passed
as well as the value "otp" as the "type".

<xmp class=idl>
[Exposed=Window, SecureContext]
interface OTPCredential : Credential {
    readonly attribute DOMString code;
};
</xmp>

<!-- ============================================================ -->
# Security # {#security}
<!-- ============================================================ -->

From a security perspective, there are two considerations with this
API:

* addressing: preventing crossing an origin boundary between the
  sending and the receiving of OTPs.
* tampering: preventing attacks based on the modification of the message.

<!-- ============================================================ -->
## Availability ## {#security-availability}
<!-- ============================================================ -->

This API is only available on:

* top level frames and
* https (or localhost, for development purposes)

This API is also only available on top level frames, to avoid abuse by
third party iframes / libraries. It could be made available to inner
frames when the origin match, but we haven't yet found a concrete
requirement / demand for this feature, so we keep it more constrained
for the moment. 

This API is also only available via https or localhost (for development
purposes). We don't entirely adopt the concept of trustworthy urls
because it covers more schemes (e.g. data://123) than we would like to
(our initial intuition is that (a) https and localhost covers most
cases and (b) it needs to be clear to the user what public facing
entity its sending the SMS).

<!-- ============================================================ -->
## Addressing ## {#security-addressing}
<!-- ============================================================ -->

Each transport mechanism is responsible for guaranteeing that the
browser has enough information to route the OTP appropriately to the
intended origin.

For SMS, for example, the addressing scheme explicitly names the
intented origin (in this case, example.com):

<div class=example>
```
Your verification code is: 123ABC78

@example.com #123ABC78
```
</div>

The addressing scheme must be enforced by the agent to guarantee that
it gets routed appropriately.

<!-- ============================================================ -->
## Tampering ## {#security-tampering}
<!-- ============================================================ -->

There isn't any built-in cryptographic guarantee that the OTP that is
being handed back by this API hasn't been tampered with. For example,
an attacker could send an SMS to the user's phone with an arbitrary
origin which the agent happilly passes back to the requesting call. 

<div class=example>
```
Your verification code is: MUAHAHAHA

@example.com #MUAHAHAHA
```
</div>

It is the responsibility for the caller to:

* put in place the checks necessary to verify that the OTP that was received
  is a valid one (e.g. store OTPs that were sent on a server side database).
* degrade gracefully when an invalid OTP is received (e.g. re-request one).

<!-- ====================================================================== -->
# Acknowledgements # {#acknowledgements}
<!-- ====================================================================== -->

Many thanks to
Steven Soneff,
Ayu Ishii,
Reilly Grant,
Eiji Kitamura,
Alex Russell,
Joshua Bell,
Ricky Mondello and
Mike West
for helping craft this proposal.

Special thanks to Tab Atkins, Jr. for creating and maintaining
[Bikeshed](https://github.com/tabatkins/bikeshed), the specification
authoring tool used to create this document, and for his general
authoring advice.